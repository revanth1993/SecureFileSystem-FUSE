/*
  Key Value System
  Copyright (C) 2016 Hung-Wei Tseng, Ph.D. <hungwei_tseng@ncsu.edu>

  This program can be distributed under the terms of the GNU GPLv3.
  See the file COPYING.

  This code is derived from function prototypes found /usr/include/fuse/fuse.h
  Copyright (C) 2001-2007  Miklos Szeredi <miklos@szeredi.hu>
  His code is licensed under the LGPLv2.
  A copy of that code is included in the file fuse.h
  
  The point of this FUSE filesystem is to provide an introduction to
  FUSE.  It was my first FUSE filesystem as I got to know the
  software; hopefully, the comments in this code will help people who
  follow later to get a gentler introduction.

*/

#include "kvfs.h"
typedef struct filestructure{
	char *filename;
	size_t filesize;
	char *data;
	struct stat metadata;
	struct filenode *next;
	struct filenode *hardlink;
}filenode;

typedef struct symlink{
	char *filename;
	filenode *file;
}symlinknode;

filenode *head = NULL;
///////////////////////////////////////////////////////////
//
// Prototypes for all these functions, and the C-style comments,
// come from /usr/include/fuse.h
//
/** Get file attributes.
 *
 * Similar to stat().  The 'st_dev' and 'st_blksize' fields are
 * ignored.  The 'st_ino' field is ignored except if the 'use_ino'
 * mount option is given.
 */
filenode * search(const char *path)
{
	filenode *temp = head;
	while(temp!=NULL)
	{
		if(strcmp(path,temp->filename) == 0)
		{
			return temp;
		}
		temp = temp->next;
	}
	
	return NULL;
}

int kvfs_getattr_impl(const char *path, struct stat *statbuf)
{
	
    log_msg("kvfs_getattr_impl %s\n",path);
    	int res = 0;
	if (strcmp(str2md5("/", 1),path) == 0)
	{
		log_msg("get attr of root directory\n");
		memset(statbuf, 0, sizeof(struct stat));
		statbuf->st_mode = S_IFDIR | 0777;
		statbuf->st_nlink = 1;
		statbuf->st_size =4096;	
	}
	else
	{
		
		log_msg("reading another file\n");
		filenode *searched = search(path);	
                if (searched==NULL)
		{
			return -ENOENT;				
		}
		while(searched->hardlink!=NULL)
		{
			searched = searched->hardlink;
		}
		if (searched !=NULL)
		{
			log_msg("found a file node \n");
			memset(statbuf, 0, sizeof(struct stat));
			statbuf->st_mode = searched->metadata.st_mode;
			statbuf->st_nlink = searched->metadata.st_nlink;
			statbuf->st_size = searched->filesize;
			statbuf->st_uid = searched->metadata.st_uid;
			statbuf->st_gid = searched->metadata.st_gid;
			statbuf->st_ctime = head->metadata.st_ctime;
			statbuf->st_atime = head->metadata.st_atime;
			statbuf->st_mtime = head->metadata.st_mtime;
			log_msg("found uid gid %d %d",statbuf->st_uid,statbuf->st_gid);
		}
		else
		{
			log_msg("could not found any\n");			
			return -ENOENT;
		}
	}
	return res;
}

/** Read the target of a symbolic link
 *
 * The buffer should be filled with a null terminated string.  The
 * buffer size argument includes the space for the terminating
 * null character.  If the linkname is too long to fit in the
 * buffer, it should be truncated.  The return value should be 0
 * for success.
 */
// Note the system readlink() will truncate and lose the terminating
// null.  So, the size passed to to the system readlink() must be one
// less than the size passed to kvfs_readlink()
// kvfs_readlink() code by Bernardo F Costa (thanks!)
int kvfs_readlink_impl(const char *path, char *link, size_t size)
{
    log_msg("kvfs_readlink_impl %s\n",path);
    return 0;
}

/** Create a file node
 *
 * There is no create() operation, mknod() will be called for
 * creation of all non-directory, non-symlink nodes.
 */
// shouldn't that comment be "if" there is no.... ?
int kvfs_mknod_impl(const char *path, mode_t mode, dev_t dev)
{
	log_msg("kvfs_mknod_impl %s\n",path);
	if (head==NULL)
		{
			log_msg("creating the first file\n");
			head = (filenode *)malloc(sizeof(filenode));
			head->filename = (char *)malloc(strlen(path)*sizeof(char));
			log_msg("%d\n",strlen(path));
			memcpy(head->filename,path,strlen(path));
			log_msg("copied filename %s\n",head->filename);
			head->metadata.st_mode = S_IFREG | mode;
			head->metadata.st_uid = fuse_get_context()->uid;
			head->metadata.st_gid = fuse_get_context()->gid;
			head->metadata.st_rdev = dev;
			log_msg("copied uid gid %d %d\n",head->metadata.st_uid,head->metadata.st_gid);
			head->metadata.st_nlink = 1;
			head->metadata.st_atime = (time_t)time(NULL);
			head->metadata.st_mtime = (time_t)time(NULL);
			head->metadata.st_ctime = (time_t)time(NULL);			
			head->next=NULL;
			head->hardlink=NULL;
			head->filesize=0;
			head->data = NULL;
		}

		else
		{
			log_msg("creating new file\n");
			filenode *prevfile=head,*newfile;
			while(prevfile->next!=NULL)
			{
				prevfile=prevfile->next;
			}

			newfile = (filenode *)malloc(sizeof(filenode));
			newfile->filename = (char *)malloc(strlen(path)*sizeof(char));
			log_msg("%d\n",strlen(path));
			memcpy(newfile->filename,path,strlen(path));
			log_msg("copied filename %s\n",newfile->filename);
			newfile->metadata.st_mode = S_IFREG | mode;
			newfile->metadata.st_uid = fuse_get_context()->uid;
			newfile->metadata.st_gid = fuse_get_context()->gid;
			newfile->metadata.st_atime = (time_t)time(NULL);
			newfile->metadata.st_mtime = (time_t)time(NULL);
			newfile->metadata.st_ctime = (time_t)time(NULL);
			newfile->metadata.st_nlink = 1;
			newfile->metadata.st_rdev = dev;
			newfile->next=NULL;
			newfile->hardlink = NULL;
			newfile->data = NULL;	
			newfile->filesize=0;
			prevfile->next = newfile;

		}
	

	return 0;
}

/** Create a directory */
int kvfs_mkdir_impl(const char *path, mode_t mode)
{
	log_msg("kvfs_mkdir_impl %s\n",path);
	if (head==NULL)
		{
			log_msg("creating the first directory\n");
			head = (filenode *)malloc(sizeof(filenode));
			head->filename = (char *)malloc(strlen(path)*sizeof(char));
			log_msg("%d\n",strlen(path));
			memcpy(head->filename,path,strlen(path));
			log_msg("copied directory name %s\n",head->filename);
			head->metadata.st_mode = S_IFDIR | mode;
			head->metadata.st_uid = fuse_get_context()->uid;
			head->metadata.st_gid = fuse_get_context()->gid;
			log_msg("copied uid gid %d %d\n",head->metadata.st_uid,head->metadata.st_gid);
			head->metadata.st_nlink = 1;
			head->metadata.st_atime = (time_t)time(NULL);
			head->metadata.st_mtime = (time_t)time(NULL);
			head->metadata.st_ctime = (time_t)time(NULL);			
			head->next=NULL;
			head->hardlink=NULL;
			head->filesize=4096;
			head->data = NULL;
		}

		else
		{
			log_msg("creating new file\n");
			filenode *prevfile=head,*newfile;
			while(prevfile->next!=NULL)
			{
				prevfile=prevfile->next;
			}

			newfile = (filenode *)malloc(sizeof(filenode));
			newfile->filename = (char *)malloc(strlen(path)*sizeof(char));
			log_msg("%d\n",strlen(path));
			memcpy(newfile->filename,path,strlen(path));
			log_msg("copied filename %s\n",newfile->filename);
			newfile->metadata.st_mode = S_IFDIR | mode;
			newfile->metadata.st_uid = fuse_get_context()->uid;
			newfile->metadata.st_gid = fuse_get_context()->gid;
			newfile->metadata.st_atime = (time_t)time(NULL);
			newfile->metadata.st_mtime = (time_t)time(NULL);
			newfile->metadata.st_ctime = (time_t)time(NULL);
			newfile->metadata.st_nlink = 1;
			newfile->next=NULL;
			newfile->hardlink = NULL;
			newfile->data = NULL;	
			newfile->filesize=4096;
			prevfile->next = newfile;

		}
	

	return 0;

}

/** Remove a file */
int kvfs_unlink_impl(const char *path)
{
	log_msg("kvfs_unlink_impl %s\n",path);
    	filenode *prevremove,*removefile,*temp;
	removefile = search(path);
	if (removefile==head && head != NULL)
	{
		if(removefile->hardlink==NULL && removefile->metadata.st_nlink == 1)
		{
			// remove a general node where its not being pionted by any node
			log_msg("removing head loner node\n");	
			head = removefile->next;
			log_msg("unlinking head file\n");
			free(removefile);
			
		}
		else if(removefile->hardlink==NULL && removefile->metadata.st_nlink != 1)
		{
			// remove a mother node 
			//get a child node copy the filename? free the other node
			log_msg("removing head mother node\n");	
			temp = head;
			while(temp->hardlink!=removefile)
			{
				temp = temp->next;
			}//found a node pioting to the mother node in temp
			log_msg("found a node pioting to the head mother node in temp\n");
			memcpy(head->filename,temp->filename,strlen(temp->filename));

			log_msg("copied the name head->filename %s temp->filename %s\n",head->filename,temp->filename);
			removefile->metadata.st_nlink--;
			//delete the temp node
			prevremove = head;
			while(prevremove->next!=temp)
			{
				prevremove = prevremove->next;
			}//found prev node of temp
			
			prevremove->next = temp->next;
			log_msg("unlinking file\n");
			free(temp);
		}
		else if(removefile->hardlink!=NULL)
		{
			//remove a node in the path of links		
			temp = removefile->hardlink;
			temp->metadata.st_nlink--;
			log_msg("decreasing the link number for the original file\n");
			prevremove->next = removefile->next;
			log_msg("unlinking file\n");
			free(removefile);
		}

	}

	else if (removefile!=NULL)
	{
		prevremove = head;
		log_msg("found a file to remove\n");
		while(prevremove->next!=removefile)
		{
			prevremove = prevremove->next;
		}
		

		if(removefile->hardlink==NULL && removefile->metadata.st_nlink == 1)
		{
			// remove a general node where its not being pionted by any node
			log_msg("removing loner node\n");	
			prevremove->next = removefile->next;
			log_msg("unlinking file\n");
			free(removefile);
			
		}
		else if(removefile->hardlink==NULL && removefile->metadata.st_nlink != 1)
		{
			// remove a mother node 
			//get a child node copy the filename? free the other node
			log_msg("removing mother node\n");	
			temp = head;
			while(temp->hardlink!=removefile)
			{
				temp = temp->next;
			}//found a node pioting to the mother node in temp
			log_msg("found a node pioting to the mother node in temp\n");
			memcpy(removefile->filename,temp->filename,strlen(temp->filename));
			log_msg("copied the name\n");
			removefile->metadata.st_nlink--;
			//delete the temp node
			prevremove = head;
			while(prevremove->next!=temp)
			{
				prevremove = prevremove->next;
			}//found prev node of temp
			
			prevremove->next = temp->next;
			log_msg("unlinking file\n");
			free(temp);
		}
		else if(removefile->hardlink!=NULL)
		{
			//remove a node in the path of links		
			temp = removefile->hardlink;
			temp->metadata.st_nlink--;
			log_msg("decreasing the link number for the original file\n");
			prevremove->next = removefile->next;
			log_msg("unlinking file\n");
			free(removefile);
		}

		
	}

    return 0;
}

/** Remove a directory */
int kvfs_rmdir_impl(const char *path)
{
	log_msg("kvfs_rmdir_impl %s\n",path);
	filenode *prevremove,*removedir,*temp;
	removedir = search(path);
	
	if(removedir == head && removedir != NULL)
	{
		log_msg("removing the head node which is a direcoty\n");
		temp = head;		
		head = head->next;
		free(temp);
	}

	else if (removedir != NULL)
	{
		log_msg("removing the DIFF node which is a direcoty\n");
		prevremove = head;
		while(prevremove->next!=removedir)
		{
			prevremove= prevremove->next;
		}
		prevremove->next = removedir->next;		
		free(removedir);
		
	}

        return 0;
}

/** Create a symbolic link */
// The parameters here are a little bit confusing, but do correspond
// to the symlink() system call.  The 'path' is where the link points,
// while the 'link' is the link itself.  So we need to leave the path
// unaltered, but insert the link into the mounted directory.
int kvfs_symlink_impl(const char *path, const char *link)
{
    log_msg("kvfs_symlink_impl %s\n",path);
    return 0;
}

/** Rename a file */
// both path and newpath are fs-relative
int kvfs_rename_impl(const char *path, const char *newpath)
{
	log_msg("kvfs_rename_impl %s\n",path);
	filenode *old;
	old = search(path);

	if(old!=NULL)
	{
		log_msg("found a file %s renaming \n",old->filename);
		old->filename = (char *)realloc(old->filename,strlen(newpath));
		memcpy(old->filename,newpath,strlen(newpath));
		log_msg("updated name %s\n",old->filename);
		return 0;
	}

    return -1;
}

/** Create a hard link to a file */
int kvfs_link_impl(const char *path, const char *newpath)
{
	log_msg("kvfs_link_impl %s\n",newpath);
	filenode *searched,*newhardlink,*tail=head;
	searched = search(path);
	if(searched!=NULL)
	{
		while(tail->next!=NULL)
		{
			tail=tail->next;
		}

		log_msg("path found to hardlink\n");
		newhardlink = (filenode *)malloc(sizeof(filenode));
		newhardlink->filename = (char *)malloc(strlen(newpath));
		memcpy(newhardlink->filename,newpath,strlen(newpath));
		log_msg("hard link file name %s\n",newpath);
		while(searched->hardlink!=NULL)
		{
			searched = searched->hardlink;  //get the mother node!!
		}
		newhardlink->hardlink = searched;
		searched->metadata.st_nlink = searched->metadata.st_nlink + 1;
		log_msg("updated the no of links %d",searched->metadata.st_nlink);
		tail->next = newhardlink;
	}
    return 0;
}

/** Change the permission bits of a file */
int kvfs_chmod_impl(const char *path, mode_t mode)
{
    log_msg("kvfs_chmod_impl %s\n",path);

	filenode *searched;
	searched = search(path);
	if(searched!=NULL)
	{
		log_msg("old chmod %d\n",searched->metadata.st_mode);
		searched->metadata.st_mode = S_IFREG | mode;
		log_msg("new chmod %d\n",searched->metadata.st_mode);
	}
    return 0;
}

/** Change the owner and group of a file */
int kvfs_chown_impl(const char *path, uid_t uid, gid_t gid)
{
    log_msg("kvfs_chown_impl %s\n",path);
	filenode *searched;
	searched = search(path);
	if(searched!=NULL)
	{
		log_msg("old owner %d\n",searched->metadata.st_uid);
		log_msg("old group %d\n",searched->metadata.st_gid);
		searched->metadata.st_uid = uid;
		searched->metadata.st_gid = gid;
		log_msg("new owner %d\n",searched->metadata.st_uid);
		log_msg("new group %d\n",searched->metadata.st_gid);
	}

    return 0;
}

/** Change the size of a file */
int kvfs_truncate_impl(const char *path, off_t newsize)
{
	log_msg("kvfs_truncate_impl %s\n",path);
	filenode *searched;
	searched = search(path);
	if(searched!=NULL)
	{
		log_msg("truncating the file\n");
		log_msg("old file size %d data %s\n",searched->filesize,searched->data);
		searched->data = (char *)realloc(searched->data,newsize);
		searched->filesize = newsize;
		log_msg("new file size %d data %s\n",searched->filesize,searched->data);
	}
	return 0;
}

/** Change the access and/or modification times of a file */
/* note -- I'll want to change this as soon as 2.6 is in debian testing */
int kvfs_utime_impl(const char *path, struct utimbuf *ubuf)
{
	log_msg("kvfs_utime_impl %s\n",path);
	filenode *searched;
	searched = search(path);
	if(searched!=NULL)
	{
		log_msg("old mtime %s\n",searched->metadata.st_mtime);
		log_msg("old atime %d\n",searched->metadata.st_atime);
		searched->metadata.st_mtime = ubuf->modtime;
		searched->metadata.st_atime = ubuf->actime;
		log_msg("new mtime %d\n",searched->metadata.st_mtime);
		log_msg("new atime %d\n",searched->metadata.st_atime);
	}

    return 0;
}

/** File open operation
 *
 * No creation, or truncation flags (O_CREAT, O_EXCL, O_TRUNC)
 * will be passed to open().  Open should check if the operation
 * is permitted for the given flags.  Optionally open may also
 * return an arbitrary filehandle in the fuse_file_info structure,
 * which will be passed to all file operations.
 *
 * Changed in version 2.2
 */
int kvfs_open_impl(const char *path, struct fuse_file_info *fi)
{
	log_msg("kvfs_open_impl %s\n",path);

    return 0;
}

/** Read data from an open file
 *
 * Read should return exactly the number of bytes requested except
 * on EOF or error, otherwise the rest of the data will be
 * substituted with zeroes.  An exception to this is when the
 * 'direct_io' mount option is specified, in which case the return
 * value of the read system call will reflect the return value of
 * this operation.
 *
 * Changed in version 2.2
 */
// I don't fully understand the documentation above -- it doesn't
// match the documentation for the read() system call which says it
// can return with anything up to the amount of data requested. nor
// with the fusexmp code which returns the amount of data also
// returned by read.
int kvfs_read_impl(const char *path, char *buf, size_t size, off_t offset, struct fuse_file_info *fi)
{
    log_msg("kvfs_read_impl %s\n",path);
	
	log_msg("----------------------\n");

	log_msg("size %d %d\n",size,offset);
	filenode *searched = search(path);
	if (searched!=NULL)
	{
		while(searched->hardlink!=NULL)
		{
			log_msg("hardlink found\n");
			searched = searched->hardlink;
		}
		
		log_msg("found a file already existing, reading\n");
		log_msg("reading data from offset %d amount of data %d \n",offset,searched->filesize-offset);		
		if (searched->filesize-offset < size)
		{
			memcpy(buf,searched->data+offset,searched->filesize-offset);
			log_msg("filesize is less than size of buffer %s\n",buf);
			searched->metadata.st_atime = (time_t)time(NULL);
			return searched->filesize;
		}
		else
		{
			memcpy(buf,searched->data+offset,size);
			log_msg("file size greater than buffer  %s\n",buf);
			searched->metadata.st_atime = (time_t)time(NULL);
			return size;			
		}
	}
	log_msg("----------------------\n");	


    return 0;
}

/** Write data to an open file
 *
 * Write should return exactly the number of bytes requested
 * except on error.  An exception to this is when the 'direct_io'
 * mount option is specified (see read operation).
 *
 * Changed in version 2.2
 */
// As  with read(), the documentation above is inconsistent with the
// documentation for the write() system call.
int kvfs_write_impl(const char *path, const char *buf, size_t size, off_t offset,struct fuse_file_info *fi)
{

	log_msg("kvfs_write_impl %s\n",path);
	log_msg("size_t %d  off_t %d\n",size,offset);
    	filenode *searched = search(path);
	if (searched!=NULL)
	{
		if(searched->hardlink!=NULL)
		{
			log_msg("hardlink found\n");
			searched = searched->hardlink;
		}
		
		if(offset == 0)
		{
			log_msg("file already existing,overwriting and updating\n");
			free(searched->data);
			searched->data = (char *)malloc(size*sizeof(char));
			memcpy(searched->data,buf,size*sizeof(char));
			searched->filesize = size;
			log_msg("copied size %d\n",searched->filesize);
			log_msg("copied content %s\n",searched->data);			 
			searched->metadata.st_mtime = (time_t)time(NULL);
		
		}
		else
		{
			log_msg("file already existing,appending\n");
			searched->data = (char *)realloc(searched->data,searched->filesize+size*sizeof(char));
			memcpy(searched->data+searched->filesize,buf,size*sizeof(char));
			log_msg("copied size %d\n",searched->filesize);
			searched->filesize = searched->filesize+size;
			searched->metadata.st_mtime = (time_t)time(NULL);
			log_msg("updated size %d\n",searched->filesize);
			log_msg("updated content %s\n",searched->data);			
		}
		
	}
		
		
    return 0;
}

/** Get file system statistics
 *
 * The 'f_frsize', 'f_favail', 'f_fsid' and 'f_flag' fields are ignored
 *
 * Replaced 'struct statfs' parameter with 'struct statvfs' in
 * version 2.5
 */
int kvfs_statfs_impl(const char *path, struct statvfs *statv)
{
    log_msg("kvfs_statfs_impl %s\n",path);
    return 0;
}

/** Possibly flush cached data
 *
 * BIG NOTE: This is not equivalent to fsync().  It's not a
 * request to sync dirty data.
 *
 * Flush is called on each close() of a file descriptor.  So if a
 * filesystem wants to return write errors in close() and the file
 * has cached dirty data, this is a good place to write back data
 * and return any errors.  Since many applications ignore close()
 * errors this is not always useful.
 *
 * NOTE: The flush() method may be called more than once for each
 * open().  This happens if more than one file descriptor refers
 * to an opened file due to dup(), dup2() or fork() calls.  It is
 * not possible to determine if a flush is final, so each flush
 * should be treated equally.  Multiple write-flush sequences are
 * relatively rare, so this shouldn't be a problem.
 *
 * Filesystems shouldn't assume that flush will always be called
 * after some writes, or that if will be called at all.
 *
 * Changed in version 2.2
 */
// this is a no-op in BBFS.  It just logs the call and returns success
int kvfs_flush_impl(const char *path, struct fuse_file_info *fi)
{
    log_msg("\nkvfs_flush(path=\"%s\", fi=0x%08x)\n", path, fi);
    // no need to get fpath on this one, since I work from fi->fh not the path
    log_fi(fi);
	
    return 0;
}

/** Release an open file
 *
 * Release is called when there are no more references to an open
 * file: all file descriptors are closed and all memory mappings
 * are unmapped.
 *
 * For every open() call there will be exactly one release() call
 * with the same flags and file descriptor.  It is possible to
 * have a file opened more than once, in which case only the last
 * release will mean, that no more reads/writes will happen on the
 * file.  The return value of release is ignored.
 *
 * Changed in version 2.2
 */
int kvfs_release_impl(const char *path, struct fuse_file_info *fi)
{
    log_msg("kvfs_release_impl %s\n",path);
    return 0;
}

/** Synchronize file contents
 *
 * If the datasync parameter is non-zero, then only the user data
 * should be flushed, not the meta data.
 *
 * Changed in version 2.2
 */
int kvfs_fsync_impl(const char *path, int datasync, struct fuse_file_info *fi)
{
    log_msg("kvfs_fsync_impl %s\n",path);
    return 0;
}

#ifdef HAVE_SYS_XATTR_H
/** Set extended attributes */
int kvfs_setxattr_impl(const char *path, const char *name, const char *value, size_t size, int flags)
{
    log_msg("kvfs_setxattr_impl %s\n",path);
    return 0;
}

/** Get extended attributes */
int kvfs_getxattr_impl(const char *path, const char *name, char *value, size_t size)
{
    log_msg("kvfs_getxattr_impl %s\n",path);
    return 0;
}

/** List extended attributes */
int kvfs_listxattr_impl(const char *path, char *list, size_t size)
{
    log_msg("kvfs_listattr_impl %s\n",path);
    return 0;
}

/** Remove extended attributes */
int kvfs_removexattr_impl(const char *path, const char *name)
{
    log_msg("kvfs_removexattr_impl %s\n",path);
    return 0;
}
#endif

/** Open directory
 *
 * This method should check if the open operation is permitted for
 * this  directory
 *
 * Introduced in version 2.3
 */
int kvfs_opendir_impl(const char *path, struct fuse_file_info *fi)
{
    log_msg("kvfs_opendir_impl %s\n",path);
	

    return 0;
}

/** Read directory
 *
 * This supersedes the old getdir() interface.  New applications
 * should use this.
 *
 * The filesystem may choose between two modes of operation:
 *
 * 1) The readdir implementation ignores the offset parameter, and
 * passes zero to the filler function's offset.  The filler
 * function will not return '1' (unless an error happens), so the
 * whole directory is read in a single readdir operation.  This
 * works just like the old getdir() method.
 *
 * 2) The readdir implementation keeps track of the offsets of the
 * directory entries.  It uses the offset parameter and always
 * passes non-zero offset to the filler function.  When the buffer
 * is full (or an error happens) the filler function will return
 * '1'.
 *
 * Introduced in version 2.3
 */

int kvfs_readdir_impl(const char *path, void *buf, fuse_fill_dir_t filler, off_t offset, struct fuse_file_info *fi)
{

	log_msg("kvfs_readdir_impl %s\n",path);
	(void) offset;
	(void) fi;


	filler(buf, ".", NULL, 0);
	filler(buf, "..", NULL, 0);

	filenode *list=head;
	if (strcmp(str2md5("/", 1),path) == 0)
	{
		log_msg("reading the mounted directory\n");
		while(list!=NULL)
		{
			filler(buf,list->filename,NULL,0);
			list=list->next;
		}
		
	}


	return 0;
}

/** Release directory
 *
 * Introduced in version 2.3
 */
int kvfs_releasedir_impl(const char *path, struct fuse_file_info *fi)
{
    log_msg("kvfs_releasedir_impl %s\n",path);
    return 0;
}

/** Synchronize directory contents
 *
 * If the datasync parameter is non-zero, then only the user data
 * should be flushed, not the meta data
 *
 * Introduced in version 2.3
 */
// when exactly is this called?  when a user calls fsync and it
// happens to be a directory? ??? >>> I need to implement this...
int kvfs_fsyncdir_impl(const char *path, int datasync, struct fuse_file_info *fi)
{
    log_msg("kvfs_fsyndir_impl %s\n",path);
    return 0;
}

int kvfs_access_impl(const char *path, int mask)
{
    log_msg("kvfs_access_impl %s\n",path);
    return 0;
}

/**
 * Create and open a file
 *
 * If the file does not exist, first create it with the specified
 * mode, and then open it.
 *
 * If this method is not implemented or under Linux kernel
 * versions earlier than 2.6.15, the mknod() and open() methods
 * will be called instead.
 *
 * Introduced in version 2.5
 */
// Not implemented.  I had a version that used creat() to create and
// open the file, which it turned out opened the file write-only.

/**
 * Change the size of an open file
 *
 * This method is called instead of the truncate() method if the
 * truncation was invoked from an ftruncate() system call.
 *
 * If this method is not implemented or under Linux kernel
 * versions earlier than 2.6.15, the truncate() method will be
 * called instead.
 *
 * Introduced in version 2.5
 */
int kvfs_ftruncate_impl(const char *path, off_t offset, struct fuse_file_info *fi)
{
    log_msg("kvfs_ftruncate_impl %s\n",path);
    return 0;
}

/**
 * Get attributes from an open file
 *
 * This method is called instead of the getattr() method if the
 * file information is available.
 *
 * Currently this is only called after the create() method if that
 * is implemented (see above).  Later it may be called for
 * invocations of fstat() too.
 *
 * Introduced in version 2.5
 */
int kvfs_fgetattr_impl(const char *path, struct stat *statbuf, struct fuse_file_info *fi)
{
    log_msg("kvfs_fgetattr_impl %s\n",path);
    return 0;
}

